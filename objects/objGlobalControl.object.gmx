<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Keys
leftKey = vk_left;
rightKey = vk_right;
upKey = vk_up;
downKey = vk_down;
jumpKey = ord('Z');
shootKey = ord('X');
pauseKey = vk_space;
weaponSwitchLeftKey = ord('A');
weaponSwitchRightKey = ord('S');

keyboard_set_map(vk_enter, vk_space);
keyboard_set_map(ord('W'), ord('Z'));   //For AZERTY
keyboard_set_map(ord('Q'), ord('S'));   //For AZERTY
keyboard_set_map(ord('Y'), ord('Z'));   //For QWERTZ
keyboard_set_map(ord('R'), ord('S'));   //For COLEMAK
keyboard_set_map(ord('K'), ord('Z'));   //For DVORAK


event_perform(ev_step_begin, 0); //Registers the key inputs


//Variables
global._health = 28;
global.weapon = 0;  //Can have values like megabuster, silvertomahawk etc for all weapons in the game, even those that are not on the pause menu
global.currentWeapon = 0;   //Only the weapons used in the level; only those that are on the pause menu

global.font = font_add_sprite(sprFont, ord('!'), true, 0);
global.MM3font = font_add_sprite(sprMM3Font, ord('!'), true, 0);

global.frozen = false;
global.switchingSection = false;
global.currentPickupID = 0; //Each pickup (health, weapon energy, life, tanks) has an ID
                            //This way, we can make it despawn when the room starts if the pickup has already been collected in that level


//Go to the next room if this is the initializing room
//Also, initialize some variables
if room == rmInit {

    global.bgm = -1;
    global.loopStart = -1;
    global.loopEnd = -1;
    
    display_reset(0, true); //Enables V-synch to make everything look nicer (without V-sync, GM Studio games tend to look pretty bad)
    stopAllSFX();
    
    global.GP = -1  //Gamepad

        
    room_goto(initialRoom); //initialRoom is defined in Macros
    global.eTanks = 0;
    global.mTanks = 0;
    global._lives = 2;
    global.screws = 0;
       
    var i;
    for(i = 0; i &lt;= 1000; i += 1) //If you somehow have over 1000 pickups in one room, increase this number
    {
        global.pickupCollected[i] = false;
    }
    
    for(i = 0; i &lt;= 7; i += 1)
    {
        global.bossDefeated[i] = false;
    }
    
    global.lastRoom = rmInit;
    global.checkpoint = false;
    global.checkpointX = 0;
    global.checkpointY = 0;
    global.levelStart = false;
    
    global.primaryCol = c_white;
    global.secondaryCol = c_white;
    global.outlineCol = c_black;
    
    
    //Option variables
    global.enableCharge = true; //Can we charge the buster?
    global.enableSlide = true; //Can we slide?
    global.enableScrews = true; //Do screws exist in this game?
    
    //Weapon inventory
    global.totalWeapons = 9; //10 weapons in total including the buster, but since 0 is also a valid weapon ID, the value becomes 9
    
    for(i = 0; i &lt;= global.totalWeapons; i += 1)
    {
        global.ammo[i] = 28;
    }
    
    global.weaponSlot[0] = megabuster;
    global.weaponUnlocked[0] = true; //The Mega Buster is always unlocked
    global.weaponSlot[1] = silvertomahawk;
    global.weaponUnlocked[1] = true; //Unlocked because there's no RM for it yet
    global.weaponSlot[2] = windstorm;
    global.weaponUnlocked[2] = true; //Unlocked because there's no RM for it yet
    global.weaponSlot[3] = pharaohshot;
    global.weaponUnlocked[3] = false;
    global.weaponSlot[4] = metalblade;
    global.weaponUnlocked[4] = true; //Unlocked because there's no RM for it yet
    global.weaponSlot[5] = starcrash;
    global.weaponUnlocked[5] = true; //Unlocked because there's no RM for it yet
    global.weaponSlot[6] = rushcoil;
    global.weaponUnlocked[6] = true; //Usually, Rush Coil is available from the beginning as well
    global.weaponSlot[7] = rushjet;
    global.weaponUnlocked[7] = true; //We have no RM that unlocks Rush Jet yet
    global.weaponSlot[8] = centaurflash;
    global.weaponUnlocked[8] = true; //Unlocked because there's no RM for it yet
    global.weaponSlot[9] = flashbomb;
    global.weaponUnlocked[9] = true; //Unlocked because there's no RM for it yet
    
    global.weaponUnlocked[global.totalWeapons+1] = true; //E-tank
    global.weaponUnlocked[global.totalWeapons+2] = true; //M-tank
    
    
    //Names
    global.weaponName[megabuster] = "M.BUSTER";
    global.weaponName[rushcoil] = "R.COIL";
    global.weaponName[rushjet] = "R.JET";
    
    global.weaponName[metalblade] = "M.BLADE";
    
    global.weaponName[pharaohshot] = "P.SHOT";
    
    global.weaponName[starcrash] = "S.CRASH";
    
    global.weaponName[silvertomahawk] = "SILVER.T";
    global.weaponName[windstorm] = "W.STORM";
    
    global.weaponName[centaurflash] = "C.FLASH";
    global.weaponName[flashbomb] = "FLASH.B";
    
    //Ammo
    global.weaponAmmo[megabuster] = 0;
    global.weaponAmmo[rushcoil] = 2;
    global.weaponAmmo[rushjet] = 1; //Per second
    
    global.weaponAmmo[metalblade] = 0.25;
    
    global.weaponAmmo[pharaohshot] = 1;
    
    global.weaponAmmo[starcrash] = 2; //2 when fired
    global.weaponAmmoContact[starcrash] = 3; //3 when colliding with an enemy or projectile
    
    global.weaponAmmo[silvertomahawk] = 1;
    global.weaponAmmo[windstorm] = 1;
    
    global.weaponAmmo[centaurflash] = 4;
    global.weaponAmmo[flashbomb] = 1.06;
    
    global.bossNames[0] = "HEAT MAN";
    global.bossNames[1] = "BLIZZARD MAN";
    global.bossNames[2] = "SPLASH WOMAN";
    global.bossNames[3] = "AIR MAN";
    global.bossNames[4] = "STRIKE MAN";
    global.bossNames[5] = "CONCRETE MAN";
    global.bossNames[6] = "SHADOW MAN";
    global.bossNames[7] = "PHARAOH MAN";
}


//When the level starts, all pickups should spawn
if global.levelStart == true
{
    event_user(0);
    alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keys
global.keyLeft = keyboard_check(leftKey) || gamepad_axis_value(global.GP, gp_axislh) &lt; -0.1 || gamepad_button_check(global.GP, gp_padl);
global.keyRight = keyboard_check(rightKey) || gamepad_axis_value(global.GP, gp_axislh) &gt; 0.1 || gamepad_button_check(global.GP, gp_padr);
global.keyUp = keyboard_check(upKey) || gamepad_axis_value(global.GP, gp_axislv) &lt; -0.1 || gamepad_button_check(global.GP, gp_padu);
global.keyDown = keyboard_check(downKey) || gamepad_axis_value(global.GP, gp_axislv) &gt; 0.1 || gamepad_button_check(global.GP, gp_padd);
global.keyJump = keyboard_check(jumpKey) || gamepad_button_check(global.GP, gp_face1) || gamepad_button_check(global.GP, gp_face3);
global.keyShoot = keyboard_check(shootKey) || gamepad_button_check(global.GP, gp_face2) || gamepad_button_check(global.GP, gp_face4);
global.keyPause = keyboard_check(pauseKey) || gamepad_button_check(global.GP, gp_start);
global.keyWeaponSwitchLeft = keyboard_check(weaponSwitchLeftKey) || gamepad_button_check(global.GP, gp_shoulderl) || gamepad_button_check(global.GP, gp_shoulderlb);
global.keyWeaponSwitchRight = keyboard_check(weaponSwitchRightKey) || gamepad_button_check(global.GP, gp_shoulderr) || gamepad_button_check(global.GP, gp_shoulderrb);

global.keyLeftPressed = keyboard_check_pressed(leftKey) || gamepad_button_check_pressed(global.GP, gp_padl);
global.keyRightPressed = keyboard_check_pressed(rightKey) || gamepad_button_check_pressed(global.GP, gp_padr);
global.keyUpPressed = keyboard_check_pressed(upKey) || gamepad_button_check_pressed(global.GP, gp_padu);
global.keyDownPressed = keyboard_check_pressed(downKey) || gamepad_button_check_pressed(global.GP, gp_padd);
global.keyJumpPressed = keyboard_check_pressed(jumpKey) || gamepad_button_check_pressed(global.GP, gp_face1) || gamepad_button_check_pressed(global.GP, gp_face3);
global.keyShootPressed = keyboard_check_pressed(shootKey) || gamepad_button_check_pressed(global.GP, gp_face2) || gamepad_button_check_pressed(global.GP, gp_face4);
global.keyPausePressed = keyboard_check_pressed(pauseKey) || gamepad_button_check_pressed(global.GP, gp_start);
global.keyWeaponSwitchLeftPressed = keyboard_check_pressed(weaponSwitchLeftKey) || gamepad_button_check_pressed(global.GP, gp_shoulderl) || gamepad_button_check_pressed(global.GP, gp_shoulderlb);
global.keyWeaponSwitchRightPressed = keyboard_check_pressed(weaponSwitchRightKey) || gamepad_button_check_pressed(global.GP, gp_shoulderr) || gamepad_button_check_pressed(global.GP, gp_shoulderrb);

global.keyLeftReleased = keyboard_check_released(leftKey) || gamepad_button_check_released(global.GP, gp_padl);
global.keyRightReleased = keyboard_check_released(rightKey || gamepad_button_check_released(global.GP, gp_padr));
global.keyUpReleased = keyboard_check_released(upKey) || gamepad_button_check_released(global.GP, gp_padu);
global.keyDownReleased = keyboard_check_released(downKey) || gamepad_button_check_released(global.GP, gp_padd);
global.keyJumpReleased = keyboard_check_released(jumpKey) || gamepad_button_check_released(global.GP, gp_face1);
global.keyShootReleased = keyboard_check_released(shootKey) || gamepad_button_check_released(global.GP, gp_face2) || gamepad_button_check_released(global.GP, gp_face3);
global.keyPauseReleased = keyboard_check_released(pauseKey) || gamepad_button_check_released(global.GP, gp_start) || gamepad_button_check_released(global.GP, gp_face4);
global.keyWeaponSwitchLeftReleased = keyboard_check_released(weaponSwitchLeftKey) || gamepad_button_check_released(global.GP, gp_shoulderl) || gamepad_button_check_released(global.GP, gp_shoulderlb);
global.keyWeaponSwitchRightReleased = keyboard_check_released(weaponSwitchRightKey) || gamepad_button_check_released(global.GP, gp_shoulderr) || gamepad_button_check_released(global.GP, gp_shoulderrb);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(objMegaman)
{
    x = objMegaman.x;
    y = objMegaman.y;
}

if global.loopEnd &gt; -1 &amp;&amp; global.loopStart &gt; -1 &amp;&amp; global.bgm &gt; -1 {    //Loop point
    var currPos = audio_sound_get_track_position(global.bgm);
    if currPos &gt;= global.loopEnd * 0.999 {
        var diff = global.loopEnd - global.loopStart;
        var newPos = currPos - diff;
        audio_sound_set_track_position(global.bgm, newPos);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug keys
if keyboard_check_pressed(vk_f2)
{
    sound_stop_all();
    game_restart();
}
    
if keyboard_check_pressed(vk_f4)
    window_set_fullscreen( !window_get_fullscreen() );
    
if keyboard_check_pressed(vk_escape)
    game_end();
    
if keyboard_check_pressed(vk_f7) saveGame(0);
if keyboard_check_pressed(vk_f8) loadGame(0);
if keyboard_check_pressed(vk_f12) game_restart();
if keyboard_check_pressed(vk_f11) with objMegaman grav *= -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("Event = " + async_load[? "event_type"]);        // Debug cocde so you can see which event has been
show_debug_message("Pad = " + string(async_load[? "pad_index"]));   // triggered and the pad associated with it.

if async_load[? "event_type"] == "gamepad discovered" {
    global.GP = async_load[? "pad_index"];
    show_debug_message("Default gamepad set to " + string(global.GP));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//When starting a level, none of the pickups have been used yet; however, they can be picked up, and shouldn't respawn when the room restarts
//This code makes sure all pickups spawn normally
var i, totalPickups;
totalPickups = instance_number(prtPickup);

for(i = 0; i &lt;= totalPickups; i += 1)
{
    global.pickupCollected[i] = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
