<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMegamanStand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>mskMegaman</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Teleport to the checkpoint location, if we hit a checkpoint
if global.checkpoint == true
{
    x = global.checkpointX;
    y = global.checkpointY;
}


//Initialize the camera
newSectionXOffset = 0;
newSectionYOffset = 0;
playerCameraInit();

//Physics variables
grav = 0.25; //The player's gravity
gravWater = 0.38 * grav; //The player's gravity in water
jumpSpeed = 4.75 + grav*2;  //Dunno why grav needs to be multiplied by 2, but MM jumps as high as in MM5 when doing so
jumpSpeedWater = 4.85 + grav*2;
walkSpeed = 1.296875;
maxVspeed = 7;
stepSpeed = 1/7;
stepFrames = 7;
iceDec = 0.025; //The deceleration on ice when not holding any buttons
iceDecWalk = 0.05; //The deceleration on ice when moving in the opposite direction
slideSpeed = 2.5;
slideFrames = 26;
climbSpeed = 1.296875; //Official value of MM3
initChargeTime = 20; //The amount of frames after which to start charging after the shooting animation is complete
chargeTime = 57; //Official value of MM6
hitTime = 20; //The amount of frames you experience knockback after getting hit


//Variables
ground = false;
prevGround = false;
prevXScale = image_xscale;
isStep = false;
stepTimer = 0;
canInitStep = true; //Can we initialize sidestepping?
global.xspeed = 0;
global.yspeed = 0;
canMinJump = true;
canMove = true;
canSpriteChange = true;
canShoot = true;
isShoot = false;
isThrow = false;
shootTimer = 0;
isSlide = false;
slideTimer = 0;
canHit = true;
isHit = false;
hitTimer = 0;
drawHitspark = false;
invincibilityTimer = 0;
isCharge = false;
chargeTimer = 0;
initChargeTimer = 0; //The timer for when to start charging after exiting the shooting animation
canGravity = true;
climbing = false;
climbSpriteTimer = 0;
canStep = false; //We can actually perform the step event even if canStep = false; it's merely used to block certain events from happening at the first frame, as canStep becomes true after 1 frame
alarm[0] = 1; //For canStep
pharaohShotInitTimer = 0;
teleporting = false;
teleportY = 0;
teleportTimer = 0;
deathByPit = false; //Did we die by falling in a bottomless pit?
playLandSound = true; //Should we play the landing SFX when colliding with a floor? (Disabled on ladders, for example)
playLandSoundTimer = 2; //Lasts two frames, since it takes 1 extra frame for the collision code to register
currentGrav = grav; //Normal gravity or water gravity?
currentJumpSpeed = jumpSpeed; //Normal jump speed or water jump speed?
inWater = false;
bubbleTimer = 0; //Timer for the air bubble MM creates under water
blinkTimer = 0; //Timer for MM's blinking animation when standing still
blinkTimerMax = 120;
blinkImage = 0; //0 for no blinking, 1 for blinking
blinkDuration = 8; //The amount of frames the blinking lasts
drawWeaponIcon = false; //Whether or not we should draw the weapon icon above our head (used when using quick weapon switching)
drawWeaponIconTimer = -1;
onRushJet = false; //Are we on the Rush Jet?

global.outlineCol = c_black;


//Variable sprites
spriteStand = sprMegamanStand;
spriteJump = sprMegamanJump;
spriteWalk = sprMegamanWalk;
spriteStep = sprMegamanStep;
spriteClimb = sprMegamanClimb;
spriteGetup = sprMegamanClimbGetup; //Can also be sprMegamanClimbShoot, thus it's variable

//Static sprites
spriteSlide = sprMegamanSlide;
spriteHit = sprMegamanHit;
spriteTeleport = sprMegamanTeleport;

//Set the correct whitemask colors
event_user(0);


//Show the READY text
showReady = true;
readyTimer = 0;
canSpriteChange = false;
canMove = false;
canGravity = false;
canPause = false;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize switching sections for doors

if newSectionXOffset &gt; 0 //Switching to the right
{
    playerCameraInit();
    with instance_create(x, y, objSectionSwitcher) 
    {
        dir = "right";
        door = true;
    }
}
else if newSectionXOffset &lt; 0 //Switching to the left
{
    playerCameraInit();
    with instance_create(x, y, objSectionSwitcher)
    {
        dir = "left";
        door = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize switching sections

var plt = instance_place(x, y+1, prtMovingPlatformSolid);   //Moving platform below Mega Man?

if newSectionXOffset &gt; 0 //Switching to the right
{
    x = sectionRight-6;
    playerCameraInit();
    with instance_create(x, y, objSectionSwitcher) dir = "right";
}
else if newSectionXOffset &lt; 0 //Switching to the left
{
    x = sectionLeft+6;
    playerCameraInit();
    with instance_create(x, y, objSectionSwitcher) dir = "left";
}
else if newSectionYOffset &gt; 0 //Switching down
{
    y  = sectionBottom-6 + sprite_yoffset - (sprite_height/2);
    playerCameraInit();
    with instance_create(x, y, objSectionSwitcher) dir = "down";
}
else if newSectionYOffset &lt; 0 //Switching up
{
    y  = sectionTop+6 + sprite_yoffset - (sprite_height/2);
    playerCameraInit();
    with instance_create(x, y, objSectionSwitcher) dir = "up";
}

//If there was a moving platform below Mega Man, adjust it to remain below him
if ground == true &amp;&amp; plt &gt;= 0 {
    plt.y = bbox_bottom + plt.sprite_yoffset + 1;
}
if (instance_exists(objSectionSwitcher)) {
    objSectionSwitcher.plt = plt;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Executed 1 frame after the Create event
canStep = true;
playerDeactivateObjects(); //Do not do this on frame 1, as it can prevent some Create events from executing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.frozen == false
{
    //Shooting (before sprite handling to update the sprites properly)
    playerShoot();
    
    //Handle the sprites
    playerHandleSprites();
    
    //General step event code
    playerStep();
    
    //Collision code
    playerCollision();
    
    //Handles moving platform collision
    playerMovingPlatform();
    
    //Pausing
    playerPause();
    
    //Camera
    playerCamera();
    
    //Moving from one section to the next, if possible
    playerSwitchSections();
    
    //Quick weapon switching
    playerSwitchWeapons();
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Change colors depending on the special weapon
//Primary is the helmet color (dark blue), secondary is the shirt color (cyan)

switch global.weapon
{
    case megabuster:
        global.primaryCol = make_color_rgb(0, 120, 248);
        global.secondaryCol = make_color_rgb(0, 232, 216);
    break;
    
    case rushcoil:
        global.primaryCol = make_color_rgb(216, 40, 0);
        global.secondaryCol = make_color_rgb(255, 255, 255);
    break;
    
    case rushjet:
        global.primaryCol = make_color_rgb(216, 40, 0);
        global.secondaryCol = make_color_rgb(255, 255, 255);
    break;
    
    
    
    case metalblade:
        global.primaryCol = make_color_rgb(136, 112, 0);
        global.secondaryCol = make_color_rgb(255, 224, 168);
    break;
    
    
    
    case pharaohshot:
        global.primaryCol = make_color_rgb(248, 120, 88);
        global.secondaryCol = make_color_rgb(240, 208, 176);
    break;
    
    
    
    case starcrash:
        global.primaryCol = make_color_rgb(228, 92, 16);
        global.secondaryCol = make_color_rgb(248, 184, 0);
    break;
    
    
    
    case silvertomahawk:
        global.primaryCol = make_color_rgb(228, 92, 16);
        global.secondaryCol = make_color_rgb(240, 208, 176);
    break;
    
    case windstorm:
        global.primaryCol = make_color_rgb(124, 124, 124);
        global.secondaryCol = make_color_rgb(248, 248, 248);
    break;

    case centaurflash:
        global.primaryCol = make_color_rgb(0, 171, 71);
        global.secondaryCol = make_color_rgb(248, 248, 248);
    break;
        
    
}

global.outlineCol = c_black;


if canStep == true  //global.keyPausePressed was unknown at the first frame because of event order
{
    if global.keyPausePressed == false  //The pause menu also resets the colors as to not show charging colors in the Mega Man sprite at the bottom right
                                        //However, we do not want to reset the charge after pausing
    {
        chargeTimer = 0;
        initChargeTimer = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create necessary objects
if !instance_exists(objGlobalControl)
    instance_create(x, y, objGlobalControl);
    
if !instance_exists(objHealthWeaponBar)
    instance_create(x, y, objHealthWeaponBar);
    
if !instance_exists(objFadeIn)
    instance_create(x, y, objFadeIn);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if teleporting == false &amp;&amp; showReady == false
{
    //Draws the player. Whitemasks will be used
    drawPlayer();
    
    //Hitspark
    if drawHitspark == true
    {
        draw_sprite_ext(sprHitspark, 0, sprite_get_xcenter(), sprite_get_ycenter(), image_xscale, image_yscale, 0, c_white, 1);
    }
    
    //Weapon icon (when using quick weapon switching)
    if drawWeaponIcon == true
    {
        if climbing == false
            draw_sprite_ext(sprWeaponIconsColor, global.weapon, round(x-8) + image_xscale, round(y-30), 1, 1, 0, c_white, 1);
        else
            draw_sprite_ext(sprWeaponIconsColor, global.weapon, round(x-8), round(y-30), 1, 1, 0, c_white, 1);
    }
}
else if teleporting == true
{   
    if round(view_yview[0]-32+teleportY) &gt;= y
    {
        if teleportTimer == 0
            playSFX(sfxTeleportIn);
        
        //Done teleporting; play a little animation before giving Mega Man control
        if teleportTimer != 9   //MM disappears for one frame in MM6
            drawPlayer();
        
        if teleportTimer == 2
            image_index = 1;
        else if teleportTimer == 4
            image_index = 0;
        else if teleportTimer == 6
            image_index = 2;
        else if teleportTimer = 9
        {
            teleporting = false;
            teleportTimer = 0;
            canSpriteChange = true;
            canMove = true;
            teleportY = 0;
            canGravity = true;
            canPause = true;
            sprite_index = spriteStand;
            instance_activate_all();
            exit;
        }
        
        teleportTimer += 1;
    }
    else
    {
        //Teleporting downwards
        draw_sprite_ext(spriteTeleport, image_index, round(x), round(view_yview[0]-32+teleportY), image_xscale, image_yscale, image_angle, c_white, 1);
        draw_sprite_ext(sprMegamanTeleportPrimary, image_index, round(x), round(view_yview[0]-32+teleportY), image_xscale, image_yscale, image_angle, global.primaryCol, 1);
        draw_sprite_ext(sprMegamanTeleportSecondary, image_index, round(x), round(view_yview[0]-32+teleportY), image_xscale, image_yscale, image_angle, global.secondaryCol, 1);
        
        teleportY += 7;
    }
}
else if showReady == true
{
    //Draw the READY text
    readyTimer += 1;
    
    var readyIndicator;
    readyIndicator = readyTimer mod 12;
    if readyIndicator &gt;= 6 &amp;&amp; readyIndicator &lt;= 11 //For the last 7 frames of every 14 frames, show the READY text
        draw_sprite_ext(sprReady, 0, round(view_xview[0]+(view_wview[0]/2)), round(view_yview[0]+(view_hview[0]/2)), 1, 1, 0, c_white, 1);
        
    if readyTimer &gt;= 72
    {
        readyTimer = 0;
        showReady = false;
        
        //Teleporting sequence
        teleporting = true;
        teleportY = 0;
        teleportTimer = 0;
        sprite_index = spriteTeleport;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,7</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
